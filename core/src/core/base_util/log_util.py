#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author: ÁÜäüêªÊù•‰∏™ü•¨
# @Date: 2025/9/17
# @Description: Êó•ÂøóÂ∑•ÂÖ∑Á±ªÔºåÊèê‰æõÁªü‰∏ÄÁöÑÊó•ÂøóËÆ∞ÂΩïÂäüËÉΩ / Log utility class providing unified logging functionality
"""
Êó•ÂøóÂ∑•ÂÖ∑Ê®°Âùó
Log Utility Module

Êú¨Ê®°ÂùóÊèê‰æõ‰∫Ü‰∏Ä‰∏™LogUtilÁ±ªÔºåÁî®‰∫éÁªü‰∏ÄÁÆ°ÁêÜÂíåËÆ∞ÂΩïÊó•Âøó‰ø°ÊÅØ„ÄÇÂåÖÂê´‰ª•‰∏ãÂäüËÉΩÔºö
- Â∞ÅË£Ö‰∫ÜPythonÂéüÁîüÁöÑloggingÊ®°ÂùóÁöÑÊâÄÊúâÊó•ÂøóÁ∫ßÂà´ÊñπÊ≥ï
- Êèê‰æõ‰∫ÜËá™ÂÆö‰πâÁöÑÊó•ÂøóÊ†ºÂºèÂåñÊñπÊ≥ï
- ÊîØÊåÅÊ≠•È™§ÂåñÊó•ÂøóËÆ∞ÂΩïÂíåÊï∞ÊçÆÁªìÊûÑÂåñËæìÂá∫
- Áªü‰∏ÄÈÖçÁΩÆ‰∫ÜÊó•ÂøóËæìÂá∫Ê†ºÂºèÂíåÁ∫ßÂà´

This module provides a LogUtil class for unified management and logging of log information. 
It includes the following features:
- Encapsulates all log level methods from Python's native logging module
- Provides custom log formatting methods
- Supports step-by-step logging and structured data output
- Unified configuration of log output format and levels
"""

import logging
import sys
from typing import Any, Dict, List, Optional, Set, Union

# ÈÖçÁΩÆÂÖ®Â±ÄÊó•ÂøóÊ†ºÂºè / Configure global log format
logging.basicConfig(
    stream=sys.stdout, 
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

# Ëé∑ÂèñÂÖ®Â±ÄÊó•ÂøóÂô® / Get global logger
_log = logging.getLogger()

class LogUtil:
    """
    Êó•ÂøóÂ∑•ÂÖ∑Á±ª
    Log Utility Class
    
    Êèê‰æõÁªü‰∏ÄÁöÑÊó•ÂøóËÆ∞ÂΩïÂäüËÉΩÔºåÂåÖÊã¨ÊâÄÊúâÊ†áÂáÜÊó•ÂøóÁ∫ßÂà´ÂíåËá™ÂÆö‰πâÊó•ÂøóÊ†ºÂºèÊñπÊ≥ï„ÄÇ
    Provides unified logging functionality, including all standard log levels and custom log formatting methods.
    
    ‰ΩøÁî®Á§∫‰æã / Examples:
        >>> from core.base_util.log_util import LogUtil
        >>> LogUtil.info('this is a log message')  # Âü∫Êú¨Êó•Âøó / Basic logging
        >>> LogUtil.log_step(1, 'this is step info')  # Ê≠•È™§Êó•Âøó / Step logging
        >>> LogUtil.log_dict_in_lines({'key': 'value'})  # Â≠óÂÖ∏Êó•Âøó / Dictionary logging
    """

    # ========================================
    #     ÂÜÖÁΩÆÊó•ÂøóÊñπÊ≥ï / Built-in Logging Methods
    # ========================================
    @classmethod
    def debug(cls, msg: str, *args: Any, **kwargs: Any) -> None:
        """
        ËÆ∞ÂΩïDEBUGÁ∫ßÂà´ÁöÑÊó•Âøó‰ø°ÊÅØ
        Log message with severity 'DEBUG'
        
        Args:
            msg (str): Êó•ÂøóÊ∂àÊÅØ / Log message
            *args: Ê∂àÊÅØÊ†ºÂºèÂåñÂèÇÊï∞ / Message formatting arguments
            **kwargs: ÂÖ∂‰ªñÂèÇÊï∞ÔºåÂ¶Çexc_infoÁ≠â / Other arguments like exc_info
            
        Example:
            >>> LogUtil.debug("Houston, we have a %s", "thorny problem", exc_info=1)
        """
        _log.debug(msg, *args, **kwargs)

    @classmethod
    def info(cls, msg: str, *args: Any, **kwargs: Any) -> None:
        """
        ËÆ∞ÂΩïINFOÁ∫ßÂà´ÁöÑÊó•Âøó‰ø°ÊÅØ
        Log message with severity 'INFO'
        
        Args:
            msg (str): Êó•ÂøóÊ∂àÊÅØ / Log message
            *args: Ê∂àÊÅØÊ†ºÂºèÂåñÂèÇÊï∞ / Message formatting arguments
            **kwargs: ÂÖ∂‰ªñÂèÇÊï∞ÔºåÂ¶Çexc_infoÁ≠â / Other arguments like exc_info
            
        Example:
            >>> LogUtil.info("Houston, we have a %s", "interesting problem", exc_info=1)
        """
        _log.info(msg, *args, **kwargs)

    @classmethod
    def warning(cls, msg: str, *args: Any, **kwargs: Any) -> None:
        """
        ËÆ∞ÂΩïWARNINGÁ∫ßÂà´ÁöÑÊó•Âøó‰ø°ÊÅØ
        Log message with severity 'WARNING'
        
        Args:
            msg (str): Êó•ÂøóÊ∂àÊÅØ / Log message
            *args: Ê∂àÊÅØÊ†ºÂºèÂåñÂèÇÊï∞ / Message formatting arguments
            **kwargs: ÂÖ∂‰ªñÂèÇÊï∞ÔºåÂ¶Çexc_infoÁ≠â / Other arguments like exc_info
            
        Example:
            >>> LogUtil.warning("Houston, we have a %s", "bit of a problem", exc_info=1)
        """
        _log.warning(msg, *args, **kwargs)

    @classmethod
    def warn(cls, msg: str, *args: Any, **kwargs: Any) -> None:
        """
        warningÊñπÊ≥ïÁöÑÂà´Âêç
        Alias for warning method
        
        Args:
            msg (str): Êó•ÂøóÊ∂àÊÅØ / Log message
            *args: Ê∂àÊÅØÊ†ºÂºèÂåñÂèÇÊï∞ / Message formatting arguments
            **kwargs: ÂÖ∂‰ªñÂèÇÊï∞ / Other arguments
        """
        _log.warning(msg, *args, **kwargs)

    @classmethod
    def error(cls, msg: str, *args: Any, **kwargs: Any) -> None:
        """
        ËÆ∞ÂΩïERRORÁ∫ßÂà´ÁöÑÊó•Âøó‰ø°ÊÅØ
        Log message with severity 'ERROR'
        
        Args:
            msg (str): Êó•ÂøóÊ∂àÊÅØ / Log message
            *args: Ê∂àÊÅØÊ†ºÂºèÂåñÂèÇÊï∞ / Message formatting arguments
            **kwargs: ÂÖ∂‰ªñÂèÇÊï∞ÔºåÂ¶Çexc_infoÁ≠â / Other arguments like exc_info
            
        Example:
            >>> LogUtil.error("Houston, we have a %s", "major problem", exc_info=1)
        """
        _log.error(msg, *args, **kwargs)

    @classmethod
    def exception(cls, msg: str, *args: Any, **kwargs: Any) -> None:
        """
        ËÆ∞ÂΩïÂ∏¶ÊúâÂºÇÂ∏∏‰ø°ÊÅØÁöÑERRORÁ∫ßÂà´Êó•Âøó
        Convenience method for logging an ERROR with exception information
        
        Ê≠§ÊñπÊ≥ï‰ºöËá™Âä®ÊçïËé∑ÂΩìÂâçÂºÇÂ∏∏‰ø°ÊÅØÂπ∂ÂåÖÂê´Âú®Êó•Âøó‰∏≠
        This method automatically captures current exception information and includes it in the log
        
        Args:
            msg (str): Êó•ÂøóÊ∂àÊÅØ / Log message
            *args: Ê∂àÊÅØÊ†ºÂºèÂåñÂèÇÊï∞ / Message formatting arguments
            **kwargs: ÂÖ∂‰ªñÂèÇÊï∞ / Other arguments
            
        Example:
            >>> try:
            ...     1/0
            ... except:
            ...     LogUtil.exception("An error occurred")
        """
        _log.exception(msg, *args, **kwargs)


    @classmethod
    def critical(cls, msg: str, *args: Any, **kwargs: Any) -> None:
        """
        ËÆ∞ÂΩïCRITICALÁ∫ßÂà´ÁöÑÊó•Âøó‰ø°ÊÅØÔºàÊúÄÈ´ò‰ºòÂÖàÁ∫ßÔºâ
        Log message with severity 'CRITICAL' (highest priority)
        
        Args:
            msg (str): Êó•ÂøóÊ∂àÊÅØ / Log message
            *args: Ê∂àÊÅØÊ†ºÂºèÂåñÂèÇÊï∞ / Message formatting arguments
            **kwargs: ÂÖ∂‰ªñÂèÇÊï∞ÔºåÂ¶Çexc_infoÁ≠â / Other arguments like exc_info
            
        Example:
            >>> LogUtil.critical("Houston, we have a %s", "major disaster", exc_info=1)
        """
        _log.critical(msg, *args, **kwargs)

    @classmethod
    def log(cls, level: int, msg: str, *args: Any, **kwargs: Any) -> None:
        """
        ‰ΩøÁî®ÊåáÂÆöÁ∫ßÂà´ËÆ∞ÂΩïÊó•Âøó‰ø°ÊÅØ
        Log message with user-specified severity level
        
        Args:
            level (int): Êó•ÂøóÁ∫ßÂà´ÔºàÂ¶Çlogging.DEBUG, logging.INFOÁ≠âÔºâ / Log level (e.g., logging.DEBUG, logging.INFO, etc.)
            msg (str): Êó•ÂøóÊ∂àÊÅØ / Log message
            *args: Ê∂àÊÅØÊ†ºÂºèÂåñÂèÇÊï∞ / Message formatting arguments
            **kwargs: ÂÖ∂‰ªñÂèÇÊï∞ÔºåÂ¶Çexc_infoÁ≠â / Other arguments like exc_info
            
        Example:
            >>> LogUtil.log(logging.CRITICAL, "Houston, we have a %s", "major disaster", exc_info=1)
        """
        _log.log(level, msg, *args, **kwargs)

    # fatalÊòØcriticalÁöÑÂà´Âêç / fatal is an alias for critical
    fatal = critical

    # ========================================
    #     Ëá™ÂÆö‰πâÊó•ÂøóÊñπÊ≥ï / Custom Logging Methods
    # ========================================
    @classmethod
    def log_step(cls, step_num: int, step_info: str) -> None:
        """
        ËÆ∞ÂΩïÊ≠•È™§‰ø°ÊÅØÔºå‰ΩøÁî®ÁâπÊÆäÊ†ºÂºèÊòæÁ§∫
        Log step information with special formatting
        
        Args:
            step_num (int): Ê≠•È™§ÁºñÂè∑ / Step number
            step_info (str): Ê≠•È™§ÊèèËø∞‰ø°ÊÅØ / Step description
            
        Example:
            >>> LogUtil.log_step(1, "ÂàùÂßãÂåñÊï∞ÊçÆÂ∫ìËøûÊé•")
        """
        msg = f'---------------------------step {step_num}: {step_info}------------------------------\n'
        cls.info(msg)

    @classmethod
    def log_sub_step(cls, step_num: int, step_info: str) -> None:
        """
        ËÆ∞ÂΩïÂ≠êÊ≠•È™§‰ø°ÊÅØÔºå‰ΩøÁî®Áº©ËøõÊ†ºÂºèÊòæÁ§∫
        Log sub-step information with indented formatting
        
        Args:
            step_num (int): Â≠êÊ≠•È™§ÁºñÂè∑ / Sub-step number
            step_info (str): Â≠êÊ≠•È™§ÊèèËø∞‰ø°ÊÅØ / Sub-step description
            
        Example:
            >>> LogUtil.log_sub_step(1, "Ê£ÄÊü•Êï∞ÊçÆÂ∫ìËøûÊé•Áä∂ÊÄÅ")
        """
        msg = f'                      -----step {step_num}: {step_info}-----                         \n'
        cls.info(msg)

    @classmethod
    def log_dict_in_lines(cls, dic: Dict[str, Any], msg: Optional[str] = None, max_key_length: int = 30) -> None:
        """
        ÈÄêË°åÊâìÂç∞Â≠óÂÖ∏ÂÜÖÂÆπÔºå‰ΩøÁî®'key: value'ÁöÑÊ†ºÂºè
        Print dictionary content line by line in 'key: value' format
        
        Â∞ÜÂ≠óÂÖ∏ÁöÑÊØè‰∏™ÈîÆÂÄºÂØπÊåâË°åÊòæÁ§∫ÔºåÂπ∂‰∏îÊåâÈîÆÂêçÊéíÂ∫èÔºåÊñπ‰æøÊü•ÁúãÂíåË∞ÉËØï
        Display each key-value pair of the dictionary by line, sorted by key name for easy viewing and debugging
        
        Args:
            dic (Dict[str, Any]): Ë¶ÅÊâìÂç∞ÁöÑÂ≠óÂÖ∏ÂØπË±° / Dictionary object to print
            msg (Optional[str]): Âú®ÊâìÂç∞Â≠óÂÖ∏ÂâçÊòæÁ§∫ÁöÑÊ∂àÊÅØ / Message to display before printing dictionary
            max_key_length (int): ÊúÄÂ§ßÈîÆÂêçÈïøÂ∫¶ÔºåÈªòËÆ§‰∏∫30 / Maximum key length, default is 30
            
        Example:
            >>> data = {'name': 'test', 'age': 25, 'city': 'Beijing'}
            >>> LogUtil.log_dict_in_lines(data, 'Áî®Êà∑‰ø°ÊÅØ')
        """
        if not dic or len(dic) == 0:
            cls.info('-')
            return
        margin = ''.ljust(max_key_length * 3, '-')
        cls.info(f'{margin}\n[print]printing dict detailed data in lines......')
        if msg:
            cls.info(msg)
        keys = list(dic.keys())
        keys.sort()
        for key in keys:
            space_size = max_key_length - len(str(key))
            spaces = ''.ljust(space_size, ' ')
            value = dic[key].replace('\\', '') if isinstance(dic[key], str) else dic[key]
            cls.info(f'    {spaces}{key}  :  {value} ')
        cls.info(f'{margin}\n')

    @classmethod
    def log_list_in_lines(cls, input_list: Union[List[Any], Set[Any]], msg: Optional[str] = None) -> None:
        """
        ÈÄêË°åÊâìÂç∞ÂàóË°®ÊàñÈõÜÂêàÁöÑÂÖÉÁ¥†
        Print elements of a list or set line by line
        
        Â∞ÜÂàóË°®ÊàñÈõÜÂêà‰∏≠ÁöÑÊØè‰∏™ÂÖÉÁ¥†ÊåâË°åÊòæÁ§∫ÔºåÊñπ‰æøÊü•ÁúãÂíåË∞ÉËØï
        Display each element in the list or set by line for easy viewing and debugging
        
        Args:
            input_list (Union[List[Any], Set[Any]]): Ë¶ÅÊâìÂç∞ÁöÑÂàóË°®ÊàñÈõÜÂêà / List or set to print
            msg (Optional[str]): Âú®ÊâìÂç∞ÂàóË°®ÂâçÊòæÁ§∫ÁöÑÊ∂àÊÅØ / Message to display before printing list
            
        Example:
            >>> data = ['apple', 'banana', 'cherry']
            >>> LogUtil.log_list_in_lines(data, 'Ê∞¥ÊûúÂàóË°®')
        """
        if not input_list or len(input_list) == 0:
            return
        margin = ''.ljust(80, '-')
        cls.info(f'{margin}\n[print]printing list detailed data in lines......')
        if msg:
            cls.info(msg)
        for element in input_list:
            element = str(element).replace('\\', '')
            cls.info(f'   {element} ')
        cls.info(f'{margin}\n')
